(in-package :mtx)

;; sigmoid, mse, sgd
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($sgd-optimizer :lr 10.0))
       (n ($snn (list ($affine-layer 2 4 :winit :xavier)
                      ($sigmoid-layer)
                      ($affine-layer 4 2 :winit :xavier)
                      ($sigmoid-layer))
                :o o))
       (ntr 200))
  (print ($str "INITIAL: " ($argmax (predict n :xs X) :axis :row)))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax (predict n :xs X) :axis :row))))

;; tanh, mse, sgd
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($sgd-optimizer :lr 2.0))
       (n ($snn (list ($affine-layer 2 4 :winit :xavier)
                      ($tanh-layer)
                      ($affine-layer 4 2 :winit :xavier)
                      ($tanh-layer))
                :o o))
       (ntr 200))
  (print ($str "INITIAL: " ($argmax (predict n :xs X))))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax (predict n :xs X)))))

;; sigmoid, mse, adagrad
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($adagrad-optimizer :lr 0.2))
       (n ($snn (list ($affine-layer 2 4 :winit :xavier)
                      ($sigmoid-layer)
                      ($affine-layer 4 2 :winit :xavier)
                      ($sigmoid-layer))
                :o o))
       (ntr 100))
  (print ($str "INITIAL: " ($argmax (predict n :xs X))))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax (predict n :xs X)))))

;; sigmoid, cee, sgd
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($sgd-optimizer :lr 10.0))
       (n ($snn (list ($affine-layer 2 4 :winit :xavier)
                      ($sigmoid-layer)
                      ($affine-layer 4 2 :winit :xavier)
                      ($sigmoid-layer))
                :el ($softmax-layer)
                :o o))
       (ntr 200))
  (print ($str "INITIAL: " ($argmax (predict n :xs X))))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax (predict n :xs X)))))

;; sigmoid, cee, adagrad
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($adagrad-optimizer :lr 0.2))
       (n ($snn (list ($affine-layer 2 4 :winit :xavier)
                      ($sigmoid-layer)
                      ($affine-layer 4 2 :winit :xavier)
                      ($sigmoid-layer))
                :el ($softmax-layer)
                :o o))
       (ntr 400))
  (print ($str "INITIAL: " ($argmax ($softmax (predict n :xs X)))))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax ($softmax (predict n :xs X))))))

;; relu, mse, sgd <= initialization dependent
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($sgd-optimizer :lr 0.06))
       (n ($snn (list ($affine-layer 2 4 :winit :he)
                      ($relu-layer)
                      ($affine-layer 4 2 :winit :he)
                      ($relu-layer))
                :o o))
       (ntr 1000))
  (print ($str "INITIAL: " ($argmax (predict n :xs X))))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax (predict n :xs X)))))

;; relu, cee, adam <= initialization dependent however works better
;; last relu is removed
;; investigate initial weight distribution
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($adam-optimizer))
       (layers (list ($affine-layer 2 4 :winit :he)
                     ($relu-layer)
                     ($affine-layer 4 2 :winit :he)))
       (n ($snn layers :el ($softmax-layer) :o o))
       (ntr 100)
       (w0 (slot-value (car layers) 'w)))
  (print ($str "INITIAL: " ($argmax ($softmax (predict n :xs X)))))
  (print ($str "W0: " w0 ", " ($sum w0)))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax ($softmax (predict n :xs X))))))

;; batch norm test
(let* ((X ($m '((0 0) (1 0) (0 1) (1 1))))
       (y ($m '((1 0) (0 1) (0 1) (1 0))))
       (o ($sgd-optimizer :lr 20.0))
       (n ($snn (list ($affine-layer 2 4 :winit :xavier)
                      ($batchnorm-layer 4)
                      ($sigmoid-layer)
                      ($affine-layer 4 2 :winit :xavier)
                      ($batchnorm-layer 2)
                      ($sigmoid-layer))
                :o o))
       (ntr 200))
  (print ($str "INITIAL: " ($argmax (predict n :xs X) :axis :row)))
  (time (dotimes (i ntr) (train n :xs X :ts y)))
  (print ($str "FINAL: " ($argmax (predict n :xs X) :axis :row))))
